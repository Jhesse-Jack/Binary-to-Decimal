{"version":3,"sources":["components/Modal.js","App.js","reportWebVitals.js","index.js"],"names":["ResultModal","props","Modal","show","onHide","close","Header","closeButton","Title","Body","result","Footer","Button","variant","onClick","App","useState","setShow","decnum","setdecnum","isValid","setisValid","decimal","setDecimal","convertToDecimal","parseInt","clearInput","className","type","placeholder","title","onChange","e","test","target","value","style","color","fontSize","textAlign","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qQAuBeA,EAlBK,SAACC,GACnB,OACE,mCACE,eAACC,EAAA,EAAD,CAAOC,KAAMF,EAAME,KAAMC,OAAQH,EAAMI,MAAvC,UACE,cAACH,EAAA,EAAMI,OAAP,CAAcC,aAAW,EAAzB,SACE,cAACL,EAAA,EAAMM,MAAP,mCAEF,eAACN,EAAA,EAAMO,KAAP,8BAA6BR,EAAMS,UACnC,cAACR,EAAA,EAAMS,OAAP,UACE,cAACC,EAAA,EAAD,CAAQC,QAAQ,YAAYC,QAASb,EAAMI,MAA3C,2BCwDKU,EA/DH,WAAM,MAEQC,oBAAS,GAFjB,mBAETb,EAFS,KAEHc,EAFG,OAGYD,mBAAS,IAHrB,mBAGTE,EAHS,KAGDC,EAHC,OAIcH,oBAAS,GAJvB,mBAITI,EAJS,KAIAC,EAJA,OAKcL,mBAAS,MALvB,mBAKTM,EALS,KAKAC,EALA,KAwBVC,EAAmB,WAEvB,OAAOC,SAASP,EAAQ,IAGpBQ,EAAa,WACjBP,EAAU,KAGZ,OACE,qBAAKQ,UAAU,MAAf,SACE,yBAAQA,UAAU,aAAlB,UACE,8BACG,IADH,kEAGE,uBACEC,KAAK,SACLD,UAAU,eACVE,YAAY,0BACZC,MAAM,sBACNC,SA9Bc,SAACC,GACR,mBACJC,KAAKD,EAAEE,OAAOC,QACvBd,GAAW,GACXF,EAAUa,EAAEE,OAAOC,QAEnBd,GAAW,IAyBLc,MAAOjB,IAEPE,EAIE,KAHF,mBAAGgB,MAAO,CAAEC,MAAO,MAAOC,SAAU,OAAQC,UAAW,QAAvD,mCAIF,cAAC3B,EAAA,EAAD,CAAQC,QAAQ,UAAUC,QA7Cf,WACjBG,GAAQ,GACRM,EAAWC,KACXE,KA0CM,wBAKF,cAAC,EAAD,CAAavB,KAAMA,EAAME,MA7CX,kBAAMY,GAAQ,IA6CiBP,OAAQY,UCpD9CkB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.6d0c289d.chunk.js","sourcesContent":["import React from \"react\";\nimport \"../bootstrap.min.css\";\nimport \"../App.css\";\nimport { Button, Modal } from \"react-bootstrap\";\n\nconst ResultModal = (props) => {\n  return (\n    <>\n      <Modal show={props.show} onHide={props.close}>\n        <Modal.Header closeButton>\n          <Modal.Title> Binary Converter </Modal.Title>\n        </Modal.Header>\n        <Modal.Body>Your answer is: {props.result}</Modal.Body>\n        <Modal.Footer>\n          <Button variant=\"secondary\" onClick={props.close}>\n            Close\n          </Button>\n        </Modal.Footer>\n      </Modal>\n    </>\n  );\n};\n\nexport default ResultModal;","import React, { useState } from \"react\";\nimport \"./bootstrap.min.css\";\nimport \"./App.css\";\nimport { Button } from \"react-bootstrap\";\nimport ResultModal from \"./components/Modal\";\n// import { render } from \"@testing-library/react\";\n\nconst App = () => {\n  // var regexp = /^[0-1]*[:.,-]?$/g;\n  const [show, setShow] = useState(false);\n  const [decnum, setdecnum] = useState(\"\");\n  const [isValid, setisValid] = useState(false);\n  const [decimal, setDecimal] = useState(null);\n\n  const handleShow = () => {\n    setShow(true);\n    setDecimal(convertToDecimal());\n    clearInput();\n  };\n  const handleClose = () => setShow(false);\n\n  const handleNumChange = (e) => {\n    const regexp = /^[0-1]*[:.,-]?$/g;\n    if (regexp.test(e.target.value)) {\n      setisValid(true);\n      setdecnum(e.target.value);\n    } else {\n      setisValid(false);\n    }\n  };\n\n  const convertToDecimal = () => {\n    // function to do conversion\n    return parseInt(decnum, 2);\n  };\n\n  const clearInput = () => {\n    setdecnum(\"\");\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <p>\n          {\" \"}\n          Enter any binary number (to be converted to decimal base): &nbsp;\n          <input\n            type=\"number\"\n            className=\"form-control\"\n            placeholder=\"Enter any binary number\"\n            title=\"Binary numbers only\"\n            onChange={handleNumChange}\n            value={decnum}\n          />\n          {!isValid ? (\n            <p style={{ color: \"red\", fontSize: \"12px\", textAlign: \"left\" }}>\n              Input a Binary Number\n            </p>\n          ) : null}\n          <Button variant=\"primary\" onClick={handleShow}>\n            CONVERT\n          </Button>\n        </p>\n\n        <ResultModal show={show} close={handleClose} result={decimal} />\n      </header>\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}